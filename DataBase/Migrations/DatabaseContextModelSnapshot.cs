// <auto-generated />
using System;
using DataBase.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Model.BackUpHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackUpSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DatabaseDefinitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseDefinitionId");

                    b.ToTable("BackUpHistories");
                });

            modelBuilder.Entity("DataBase.Model.BackUpHistoryLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackUpHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BackUpHistoryId");

                    b.ToTable("BackUpHistoryLogs");
                });

            modelBuilder.Entity("DataBase.Model.BackUpTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DatabaseDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseDefinitionId");

                    b.HasIndex("DriveId");

                    b.HasIndex("StorageId");

                    b.ToTable("BackUpTargets");
                });

            modelBuilder.Entity("DataBase.Model.DatabaseDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempBackupPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriveId");

                    b.HasIndex("ServerId");

                    b.ToTable("DatabaseDefinitions");
                });

            modelBuilder.Entity("DataBase.Model.Drive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 427, DateTimeKind.Local).AddTicks(4208),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(2704),
                            Letter = "A"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3774),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3779),
                            Letter = "B"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3879),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3881),
                            Letter = "C"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3882),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3883),
                            Letter = "D"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3884),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3884),
                            Letter = "E"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3888),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3889),
                            Letter = "F"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3890),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3890),
                            Letter = "G"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3892),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3892),
                            Letter = "H"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3894),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3894),
                            Letter = "I"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3896),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3897),
                            Letter = "J"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3898),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3899),
                            Letter = "K"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3900),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3900),
                            Letter = "L"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3901),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3902),
                            Letter = "M"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3903),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3904),
                            Letter = "N"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3905),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3906),
                            Letter = "O"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3907),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3907),
                            Letter = "P"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3908),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(3909),
                            Letter = "Q"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4095),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4096),
                            Letter = "R"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4098),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4099),
                            Letter = "S"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4100),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4101),
                            Letter = "T"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4102),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4103),
                            Letter = "U"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4104),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4104),
                            Letter = "V"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4105),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4106),
                            Letter = "W"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4107),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4108),
                            Letter = "X"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4109),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4109),
                            Letter = "Y"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4110),
                            LastModifiedAt = new DateTime(2023, 1, 23, 16, 1, 1, 428, DateTimeKind.Local).AddTicks(4111),
                            Letter = "Z"
                        });
                });

            modelBuilder.Entity("DataBase.Model.ScheduleBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DatabaseDefinitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchedulePlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseDefinitionId");

                    b.ToTable("ScheduleBackups");
                });

            modelBuilder.Entity("DataBase.Model.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrpcServiceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("DataBase.Model.ServerSizeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreeSpace")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("ServerToDriveId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSpace")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("ServerToDriveId");

                    b.ToTable("ServerSizeHistories");
                });

            modelBuilder.Entity("DataBase.Model.ServerToDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBackup")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriveId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerToDrives");
                });

            modelBuilder.Entity("DataBase.Model.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrpcServiceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("DataBase.Model.StorageSizeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreeSpace")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("StorageToDriveId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSpace")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.HasIndex("StorageToDriveId");

                    b.ToTable("StorageSizeHistories");
                });

            modelBuilder.Entity("DataBase.Model.StorageToDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBackup")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriveId");

                    b.HasIndex("StorageId");

                    b.ToTable("StorageToDrives");
                });

            modelBuilder.Entity("DataBase.Model.BackUpHistory", b =>
                {
                    b.HasOne("DataBase.Model.DatabaseDefinition", null)
                        .WithMany("BackUpHistories")
                        .HasForeignKey("DatabaseDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Model.BackUpHistoryLogs", b =>
                {
                    b.HasOne("DataBase.Model.BackUpHistory", null)
                        .WithMany("BackUpHistoryLogs")
                        .HasForeignKey("BackUpHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Model.BackUpTarget", b =>
                {
                    b.HasOne("DataBase.Model.DatabaseDefinition", null)
                        .WithMany("BackUpTargets")
                        .HasForeignKey("DatabaseDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Model.Drive", "Drive")
                        .WithMany()
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataBase.Model.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drive");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("DataBase.Model.DatabaseDefinition", b =>
                {
                    b.HasOne("DataBase.Model.Drive", "Drive")
                        .WithMany()
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Model.Server", null)
                        .WithMany("DatabaseDefinitions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("DataBase.Model.ScheduleBackup", b =>
                {
                    b.HasOne("DataBase.Model.DatabaseDefinition", null)
                        .WithMany("ScheduleBackups")
                        .HasForeignKey("DatabaseDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Model.ServerSizeHistory", b =>
                {
                    b.HasOne("DataBase.Model.Server", null)
                        .WithMany("ServerSizeHistories")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Model.ServerToDrive", "ServerToDrive")
                        .WithMany()
                        .HasForeignKey("ServerToDriveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServerToDrive");
                });

            modelBuilder.Entity("DataBase.Model.ServerToDrive", b =>
                {
                    b.HasOne("DataBase.Model.Drive", "Drive")
                        .WithMany()
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Model.Server", null)
                        .WithMany("ServerToDrives")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("DataBase.Model.StorageSizeHistory", b =>
                {
                    b.HasOne("DataBase.Model.Storage", null)
                        .WithMany("StorageSizeHistories")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Model.StorageToDrive", "StorageToDrive")
                        .WithMany()
                        .HasForeignKey("StorageToDriveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StorageToDrive");
                });

            modelBuilder.Entity("DataBase.Model.StorageToDrive", b =>
                {
                    b.HasOne("DataBase.Model.Drive", "Drive")
                        .WithMany()
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Model.Storage", null)
                        .WithMany("StorageToDrives")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("DataBase.Model.BackUpHistory", b =>
                {
                    b.Navigation("BackUpHistoryLogs");
                });

            modelBuilder.Entity("DataBase.Model.DatabaseDefinition", b =>
                {
                    b.Navigation("BackUpHistories");

                    b.Navigation("BackUpTargets");

                    b.Navigation("ScheduleBackups");
                });

            modelBuilder.Entity("DataBase.Model.Server", b =>
                {
                    b.Navigation("DatabaseDefinitions");

                    b.Navigation("ServerSizeHistories");

                    b.Navigation("ServerToDrives");
                });

            modelBuilder.Entity("DataBase.Model.Storage", b =>
                {
                    b.Navigation("StorageSizeHistories");

                    b.Navigation("StorageToDrives");
                });
#pragma warning restore 612, 618
        }
    }
}
